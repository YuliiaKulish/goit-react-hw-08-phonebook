{"version":3,"file":"static/js/272.0bf51b76.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Phonebook/Phonebook.styled.js","components/Phonebook/Phonebook.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Contact/Contacts.styled.js","components/Contact/Contact.js","utils/upFirst.js","utils/random-colors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nconst selectValueFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectValueFilter],\n  (contacts, valueFilter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(valueFilter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 10px;\n\n  margin-bottom: 20px;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 20px;\n  }\n  input {\n    width: 250px;\n\n    font-size: 14px;\n\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    background-color: transparent;\n    padding: 5px;\n    outline: none;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:focus {\n      border-color: #2196f3;\n    }\n  }\n  button {\n    padding: 5px 5px;\n    border: none;\n    border-radius: 4px;\n    min-width: 90px;\n\n    background-color: #2196f3;\n    color: #ffffff;\n\n    font-family: inherit;\n    font-weight: 500;\n    font-size: 14px;\n\n    text-align: center;\n\n    cursor: pointer;\n\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n      background-color: #2196f3;\n      color: #ffffff;\n      box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\n        0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\n    }\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { Form } from './ContactForm.styled';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, number } = form;\n\n    let value = {\n      name: name.value,\n      number: number.value,\n    };\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      return alert(`${name.value} is already in contacts.`);\n    }\n\n    dispatch(addContact(value));\n\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor={nanoid()}>Name</label>\n        <input\n          id={nanoid()}\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor={nanoid()}>Number</label>\n        <input\n          id={nanoid()}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 30px;\n`;\n\nexport const SubTitle = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 30px;\n`;\n","import ContactForm from 'components/ContactForm';\n\nimport { Title, SubTitle } from './Phonebook.styled';\n\nconst Phonebook = () => {\n  return (\n    <>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <SubTitle>Contacts</SubTitle>\n    </>\n  );\n};\n\nexport default Phonebook;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 5px;\n\n  margin-bottom: 20px;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n    font-size: 20px;\n  }\n  input {\n    width: 250px;\n\n    font-size: 12px;\n\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    background-color: transparent;\n    padding: 5px;\n    outline: none;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:focus {\n      border-color: #2196f3;\n    }\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\nimport { Container } from './Filter.styled';\nimport { nanoid } from 'nanoid';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value.trim()));\n  };\n\n  return (\n    <Container>\n      <label htmlFor={nanoid()}>Find contacts by name</label>\n      <input id={nanoid()} type=\"text\" name=\"filter\" onChange={changeFilter} />\n    </Container>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  padding: 5px 0;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  font-family: inherit;\n  font-size: 15px;\n\n  flex-grow: 1;\n\n  span {\n    font-size: 12px;\n  }\n`;\n\nexport const Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n\n  svg {\n    color: #bdbdbd;\n  }\n\n  &:hover {\n    svg {\n      color: #2196f3;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { MdDeleteForever } from 'react-icons/md';\n\nimport { getRandomHexColor, upFirst } from '../../utils/index';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport {\n  ContactWrapper,\n  Text,\n  Avatar,\n  Button,\n} from './Contacts.styled';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactWrapper>\n      <Avatar color={getRandomHexColor()}>{upFirst(name)}</Avatar>\n\n      <Text>\n        {name}\n        <span>Phone: {number}</span>\n      </Text>\n\n      <Button type=\"button\" onClick={handleDelete}>\n        <MdDeleteForever size={28} />\n      </Button>\n    </ContactWrapper>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const upFirst = str => str.charAt(0).toUpperCase();\n","export const getRandomHexColor = () => {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactListItem = styled.li`\n  border-top: 1px solid #2f2f37;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nimport { Contact } from '../Contact/Contact';\nimport { ContactsList, ContactListItem } from './ContactList.styled';\n\nconst ContactList = () => {\n  const visibleСontacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleСontacts.map(contact => (\n        <ContactListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 280px;\n  padding: 20px;\n\n  margin: 0 auto;\n\n  border: 1px solid black;\n  border-radius: 10px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 2px 1px -1px,\n    rgb(0 0 0 / 14%) 0px 1px 1px 0px, rgb(0 0 0 / 12%) 0px 1px 3px 0px;\n`;\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../../redux/contacts/selectors';\n\nimport Phonebook from '../../components/Phonebook/Phonebook';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\n\nimport { Container } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Phonebook />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","valueFilter","contact","name","toLowerCase","includes","Form","styled","ContactForm","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","number","value","some","alert","addContact","reset","htmlFor","nanoid","id","type","title","required","pattern","Title","SubTitle","Container","onChange","setFilter","trim","ContactWrapper","Text","Avatar","props","color","Button","Contact","str","Math","floor","random","toString","charAt","toUpperCase","onClick","deleteContact","size","ContactsList","ContactListItem","visibleСontacts","map","useEffect","fetchContacts"],"sourceRoot":""}